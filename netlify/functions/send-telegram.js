// Netlify Serverless Function
// –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –°–ö–†–´–¢ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Netlify!

exports.handler = async (event) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ success: false, message: 'Method Not Allowed' })
    };
  }

  try {
    // –¢–æ–∫–µ–Ω –∏ Chat ID —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Environment Variables Netlify (—Å–µ–∫—Ä–µ—Ç–Ω–æ!)
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const params = new URLSearchParams(event.body);
    const name = params.get('name');
    const phone = params.get('phone');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !phone) {
      return {
        statusCode: 400,
        body: JSON.stringify({
          success: false,
          message: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
        })
      };
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!</b>\n\n` +
                   `üë§ <b>–ò–º—è:</b> ${name}\n` +
                   `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}\n` +
                   `üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU')}\n` +
                   `\nüöó –ê–≤—Ç–æ—à–∫–æ–ª–∞ ¬´–ú—É—Å—Ç–∞–Ω–≥¬ª`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

    const response = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      })
    });

    let result = await response.json();
    // If group was migrated to a supergroup, retry with the new ID
    if (!result.ok && result.parameters && result.parameters.migrate_to_chat_id) {
      const newChatId = result.parameters.migrate_to_chat_id;
      try {
        const retry = await fetch(telegramUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: newChatId,
            text: message,
            parse_mode: 'HTML'
          })
        });
        const retryResult = await retry.json();
        if (retryResult.ok) {
          console.warn('TELEGRAM_CHAT_ID migrated. Update env to:', newChatId);
          return {
            statusCode: 200,
            body: JSON.stringify({
              success: true,
              message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ TELEGRAM_CHAT_ID –Ω–∞ –Ω–æ–≤—ã–π.'
            })
          };
        } else {
          console.error('Telegram retry failed:', retryResult);
          result = retryResult;
        }
      } catch (e) {
        console.error('Telegram retry error:', e);
      }
    }
    if (result.ok) {
      return {
        statusCode: 200,
        body: JSON.stringify({
          success: true,
          message: '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        })
      };
    } else {
      console.error('Telegram API error:', result);
      return {
        statusCode: 500,
        body: JSON.stringify({
          success: false,
          message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.'
        })
      };
    }

  } catch (error) {
    console.error('Server error:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.'
      })
    };
  }
};
